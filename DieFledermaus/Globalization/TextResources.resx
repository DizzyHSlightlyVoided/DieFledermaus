<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyDecrypted" xml:space="preserve">
    <value>The DieFledermaus stream has already been successfully decrypted.</value>
  </data>
  <data name="AlreadyDecryptedEntry" xml:space="preserve">
    <value>The current archive entry has already been decrypted.</value>
  </data>
  <data name="ArchiveAlreadyWritten" xml:space="preserve">
    <value>The archive has already been opened for writing.</value>
  </data>
  <data name="ArchiveClosed" xml:space="preserve">
    <value>The current archive has been disposed.</value>
  </data>
  <data name="ArchiveEntryDeleted" xml:space="preserve">
    <value>The current archive entry has been deleted.</value>
  </data>
  <data name="ArchiveExists" xml:space="preserve">
    <value>The specified path is an existing filename.</value>
  </data>
  <data name="ArchiveExistsDir" xml:space="preserve">
    <value>The specified path is an existing empty directory.</value>
  </data>
  <data name="ArchiveNotWritten" xml:space="preserve">
    <value>The archive with path "{0}" has not yet been written to.</value>
    <comment>ArchiveNotWritten</comment>
  </data>
  <data name="ArchivePathExistingDir" xml:space="preserve">
    <value>The specified path is an existing directory name.</value>
  </data>
  <data name="ArchivePathExistingFileAsDir" xml:space="preserve">
    <value>The specified path contains an existing filename as one of its directories.</value>
  </data>
  <data name="ArchivePathNonEmpty" xml:space="preserve">
    <value>The specified path is an existing non-empty directory.</value>
  </data>
  <data name="ArchiveReadMode" xml:space="preserve">
    <value>The current archive is in read-mode.</value>
  </data>
  <data name="ArchiveWriteMode" xml:space="preserve">
    <value>The current archive is in create-mode.</value>
  </data>
  <data name="BadChecksum" xml:space="preserve">
    <value>The computed checksum did not match the expected value.</value>
  </data>
  <data name="BadKey" xml:space="preserve">
    <value>The key or password is invalid.</value>
  </data>
  <data name="CollectBadArray" xml:space="preserve">
    <value>The specified array is invalid.</value>
  </data>
  <data name="CollectBadArrayType" xml:space="preserve">
    <value>The specified array is the wrong type.</value>
  </data>
  <data name="CollectReadOnly" xml:space="preserve">
    <value>The current collection is read-only.</value>
  </data>
  <data name="CommentLength" xml:space="preserve">
    <value>The length of a comment must be greater than 0 and less than or equal to 65536.</value>
  </data>
  <data name="CurrentClosed" xml:space="preserve">
    <value>The current stream is closed.</value>
  </data>
  <data name="CurrentRead" xml:space="preserve">
    <value>The current stream is in read-mode.</value>
  </data>
  <data name="CurrentWrite" xml:space="preserve">
    <value>The current stream is in write-mode.</value>
  </data>
  <data name="FilenameBadSurrogate" xml:space="preserve">
    <value>The specified filename contains an unpaired surrogate character: {0}</value>
    <comment>{0} = invalid character</comment>
  </data>
  <data name="FilenameControl" xml:space="preserve">
    <value>The specified filename contained a non-whitespace control character.</value>
  </data>
  <data name="FilenameDot" xml:space="preserve">
    <value>The specified value "{0}" is not a valid filename.</value>
    <comment>{0} = filename</comment>
  </data>
  <data name="FilenameEDirLengthLong" xml:space="preserve">
    <value>The specified path has a length greater than 255 UTF-8 bytes, counting the trailing forward-slash.</value>
  </data>
  <data name="FilenameForwardSlash" xml:space="preserve">
    <value>The specified filename contains a forward-slash character "/".</value>
  </data>
  <data name="FilenameLengthLong" xml:space="preserve">
    <value>The specified filename has a length greater than 256 UTF-8 bytes.</value>
  </data>
  <data name="FilenameLengthZero" xml:space="preserve">
    <value>The specified filename is empty.</value>
  </data>
  <data name="FilenameWhitespace" xml:space="preserve">
    <value>The specified filename contained only whitespace characters.</value>
  </data>
  <data name="FormatBad" xml:space="preserve">
    <value>The DieFledermaus stream contains invalid or contradictory formats.</value>
  </data>
  <data name="FormatUnknown" xml:space="preserve">
    <value>The DieFledermaus stream contains an unknown format.</value>
  </data>
  <data name="InvalidDataMaus" xml:space="preserve">
    <value>The stream is not a valid DieFledermaus stream.</value>
  </data>
  <data name="InvalidDataMauZ" xml:space="preserve">
    <value>The stream does not contain a valid DieFledermauZ archive.</value>
  </data>
  <data name="KeyLength" xml:space="preserve">
    <value>The specified value is an invalid length.</value>
  </data>
  <data name="KeyNotSet" xml:space="preserve">
    <value>The DieFledermaus stream is encrypted, and requires a key or password.</value>
  </data>
  <data name="NotEncrypted" xml:space="preserve">
    <value>The current instance is not encrypted.</value>
  </data>
  <data name="OutOfRangeLength" xml:space="preserve">
    <value>The sum of the parameters "{0}" and "{1}" is greater than the length of the specified array.</value>
    <comment>{0} = offset parameter, {1} = count parameter</comment>
  </data>
  <data name="OutOfRangeLessThanZero" xml:space="preserve">
    <value>The specified value is less than 0.</value>
  </data>
  <data name="PasswordZeroLength" xml:space="preserve">
    <value>A password must be at least 1 character long.</value>
  </data>
  <data name="StreamClosed" xml:space="preserve">
    <value>The specified stream is closed.</value>
  </data>
  <data name="StreamNotReadable" xml:space="preserve">
    <value>The specified stream does not support reading.</value>
  </data>
  <data name="StreamNotWritable" xml:space="preserve">
    <value>The specified stream does not support writing.</value>
  </data>
  <data name="VersionTooHigh" xml:space="preserve">
    <value>The DieFledermaus version number is higher than the supported maximum of the current implementation.</value>
  </data>
  <data name="VersionTooLow" xml:space="preserve">
    <value>The DieFledermaus version number is lower than the supported minimum.</value>
  </data>
  <data name="FormatUnknownZ" xml:space="preserve">
    <value>The DieFledermauZ archive contains an unknown format.</value>
  </data>
  <data name="VersionTooHighZ" xml:space="preserve">
    <value>The DieFledermauZ version number is higher than the supported maximum of the current implementation.</value>
  </data>
  <data name="VersionTooLowZ" xml:space="preserve">
    <value>The DieFledermauZ version number is lower than the supported minimum.</value>
  </data>
  <data name="FormatBadZ" xml:space="preserve">
    <value>The DieFledermauZ archive contains invalid or contradictory formats.</value>
  </data>
  <data name="KeyNotSetZ" xml:space="preserve">
    <value>The DieFledermauZ archive is encrypted, and requires a key or password.</value>
  </data>
  <data name="IvLength" xml:space="preserve">
    <value>The specified IV must be the same length as the block size.</value>
  </data>
  <data name="SaltLength" xml:space="preserve">
    <value>The specified salt must be the maximum length specified for the KeySize.</value>
  </data>
  <data name="FilenameControlPath" xml:space="preserve">
    <value>The specified path contained a non-whitespace control character.</value>
  </data>
  <data name="FilenameDotPath" xml:space="preserve">
    <value>The specified path contains an invalid element: {0}</value>
    <comment>{0} = filename</comment>
  </data>
  <data name="FilenamePathDoubleSlash" xml:space="preserve">
    <value>The specified path has a double forward-slash.</value>
  </data>
  <data name="FilenamePathLeadingSlash" xml:space="preserve">
    <value>The specified path has a leading forward-slash.</value>
  </data>
  <data name="FilenameWhitespacePath" xml:space="preserve">
    <value>The specified path contains a filename or directory name containing only whitespace.</value>
  </data>
  <data name="FilenameBadSurrogatePath" xml:space="preserve">
    <value>The specified path contains an unpaired surrogate character: {0}</value>
    <comment>{0} = invalid character</comment>
  </data>
  <data name="FilenameLengthZeroPath" xml:space="preserve">
    <value>The specified path has a length of 0.</value>
  </data>
  <data name="OutOfRangeLzma" xml:space="preserve">
    <value>The specified value must either be LzmaDictionarySize.Default, or must be between LzmaDictionarySize.MinValue and LzmaDictionarySize.MaxValue.</value>
  </data>
  <data name="RsaSigInvalid" xml:space="preserve">
    <value>The RSA public key used to verify the signature is invalid.</value>
  </data>
  <data name="RsaSigVerified" xml:space="preserve">
    <value>The RSA signature has already been verified.</value>
  </data>
  <data name="RsaSigPrivInvalid" xml:space="preserve">
    <value>The RSA private key used to sign the stream is invalid.</value>
  </data>
  <data name="RsaIdLength" xml:space="preserve">
    <value>The length of an RSA key-identifier must either be null or must have a length between 1 and 65536.</value>
  </data>
  <data name="RsaSigNone" xml:space="preserve">
    <value>The current instance is not signed.</value>
  </data>
  <data name="DsaSigInvalid" xml:space="preserve">
    <value>The DSA public key used to verify the signature is invalid.</value>
  </data>
  <data name="DsaSigPrivInvalid" xml:space="preserve">
    <value>The DSA private key used to sign the stream is invalid.</value>
  </data>
  <data name="EcdsaSigInvalid" xml:space="preserve">
    <value>The ECDSA public key used to verify the signature is invalid.</value>
  </data>
  <data name="EcdsaSigPrivInvalid" xml:space="preserve">
    <value>The ECDSA private key used to sign the stream is invalid.</value>
  </data>
  <data name="RsaNeedPrivate" xml:space="preserve">
    <value>The specified value is not a valid private key.</value>
  </data>
  <data name="RsaNeedPublic" xml:space="preserve">
    <value>The specified value is not a valid key.</value>
  </data>
  <data name="BadIndexRange" xml:space="preserve">
    <value>The specified index plus the number of elements in the collection is greater than the length of the specified array.</value>
  </data>
  <data name="OutOfRangeIndex" xml:space="preserve">
    <value>The specified index is less than 0 or is greater than or equal to the length of the list.</value>
  </data>
  <data name="OutOfRangeMinMax" xml:space="preserve">
    <value>The specified value is less than {0} or is greater than {1}.</value>
    <comment>{0} = minimum value, {1} = maximum value</comment>
  </data>
  <data name="NotSameLength" xml:space="preserve">
    <value>The specified value is not the same length as the existing key.</value>
  </data>
  <data name="PasswordNotSet" xml:space="preserve">
    <value>No password has been set on the current instance.</value>
  </data>
  <data name="RsaTooShort" xml:space="preserve">
    <value>The specified RSA key is too small for the current hash function. Must be at least {0} bits ({1} bytes).</value>
    <comment>{0} = bit count, {1} = byte count.</comment>
  </data>
  <data name="RsaHashTooBig" xml:space="preserve">
    <value>The specified hash function produces an output which is too big. The key used to sign the current instance does not support hashes greater than approximately {0} bits ({1} bytes).</value>
    <comment>{0} = bit count, {1} = byte count.</comment>
  </data>
  <data name="InvalidManifest" xml:space="preserve">
    <value>The signature manifest of the current archive is invalid.</value>
  </data>
</root>